import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.TextFieldListCell;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.*;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;
import javafx.stage.Window;

/**
 * @author Leo Shi
 */
public class App extends Application {

    public static void main(String[] args) {
        launch(args);
        
    }    
    @Override
    /**
     * Description: create a scene for user to input their compounds
     * @author Leo Shi
     */
    public void start(Stage primaryStage) throws Exception {
        primaryStage.setTitle("Chemical Calculator");

        // Create the registration form grid pane
        GridPane gridPane = createCalculatorPane();
        // Add UI controls to the registration form grid pane
        addUIControls(gridPane);
        // Create a scene with registration form grid pane as the root node
        Scene scene = new Scene(gridPane, 800, 500);
        // Set the scene in primary stage  
        primaryStage.setScene(scene);
        
        primaryStage.show();
    }
    /**
     * Description: set up the gridPane
     * @author Leo Shi
     * @return gridPane
     */
    private GridPane createCalculatorPane() {
        // Instantiate a new Grid Pane
        GridPane gridPane = new GridPane();

        // Position the pane at the center of the screen, both vertically and horizontally
        gridPane.setAlignment(Pos.CENTER);

        // Set a padding of 20px on each side
        gridPane.setPadding(new Insets(40, 40, 40, 40));

        // Set the horizontal gap between columns
        gridPane.setHgap(20);

        // Set the vertical gap between rows
        gridPane.setVgap(20);

        // columnOneConstraints will be applied to all the nodes placed in column one.
        ColumnConstraints columnOneConstraints = new ColumnConstraints(100, 100, Double.MAX_VALUE);
        columnOneConstraints.setHalignment(HPos.RIGHT);

        // columnTwoConstraints will be applied to all the nodes placed in column two.
        ColumnConstraints columnTwoConstrains = new ColumnConstraints(200,200, Double.MAX_VALUE);
        columnTwoConstrains.setHgrow(Priority.ALWAYS);

        gridPane.getColumnConstraints().addAll(columnOneConstraints, columnTwoConstrains);

        return gridPane;
    }
    /**
     * Description: add details to the scene
     * @author Leo Shi
     * @param gridPane
     */
    private void addUIControls(GridPane gridPane) {
        // Add rules
        Label rules = new Label("Do not enter the charges, only the chemical name i.e. O, Na, Al");
        rules.setFont(Font.font("Arial", FontWeight.BOLD, 12));
        gridPane.add(rules, 1, 0);
        GridPane.setMargin(rules, new Insets(10,10,10,10));
        // Add Header
        Label headerLabel = new Label("Enter Compounds Below");
        headerLabel.setFont(Font.font("Arial", FontWeight.BOLD, 24));
        gridPane.add(headerLabel, 0,1,2,1);
        GridPane.setHalignment(headerLabel, HPos.CENTER);
        GridPane.setMargin(headerLabel, new Insets(20, 0,20,0));

        // Add First Compound Label
        Label compoundOneLabel = new Label("First : ");
        gridPane.add(compoundOneLabel, 0,2);

        // Add First Compound Field
        TextField compoundOneField = new TextField();
        compoundOneField.setPrefHeight(40);
        gridPane.add(compoundOneField, 1,2);

        // Add Second Compound Label
        Label compoundTwoLabel = new Label("Second : ");
        gridPane.add(compoundTwoLabel, 0, 3);

        // Add Second Compound Text Field
        TextField compoundTwoField = new TextField();
        compoundTwoField.setPrefHeight(40);
        gridPane.add(compoundTwoField, 1, 3);

        // Add Submit Button
        Button submitButton = new Button("Submit");
        submitButton.setPrefHeight(40);
        submitButton.setDefaultButton(true);
        submitButton.setPrefWidth(100);
        gridPane.add(submitButton, 0, 4, 2, 1);
        GridPane.setHalignment(submitButton, HPos.CENTER);
        GridPane.setMargin(submitButton, new Insets(20, 0,20,0));

            //Creating the mouse event handler 
            EventHandler<MouseEvent> eventHandler = new EventHandler<MouseEvent>() { 
            @Override 
            public void handle(MouseEvent e) { 
                // If compound one field is empty
                if(compoundOneField.getText().isEmpty()) {
                    showAlert(Alert.AlertType.ERROR, gridPane.getScene().getWindow(), "Error!", "First Compound is invalid. Please enter a valid compound");
                    return;
                }
                // If compound two field is empty
                if(compoundTwoField.getText().isEmpty()) {
                    showAlert(Alert.AlertType.ERROR, gridPane.getScene().getWindow(), "Error!", "Second Compound is invalid. Please enter a valid compound");
                    return;
                }
                // Successful 
                showAlert(Alert.AlertType.CONFIRMATION, gridPane.getScene().getWindow(), "Calculate Successful!", "Answer:  " ); // output the answer 
            }
        
            };  
        //Registering the event filter 
        submitButton.addEventFilter(MouseEvent.MOUSE_CLICKED, eventHandler);  
        }
        
        private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
            Alert alert = new Alert(alertType);
            alert.setTitle(title);
            alert.setHeaderText(null);
            alert.setContentText(message);
            alert.initOwner(owner);
            alert.show();
        }
}


